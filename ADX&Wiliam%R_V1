# Install required packages if needed
!pip install yfinance ta plotly --quiet

import yfinance as yf
import pandas as pd
import numpy as np
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import plotly.express as px
import ta
from datetime import datetime

# -----------------------------
# 1. Download Price Data
# -----------------------------
start_date = "2010-01-01"
end_date   = "2025-04-11"  # Until today as specified
ticker     = "BEL.NS"      # BEL ticker on NSE

wr_upper_band = -25
wr_lower_band = -75

# Download daily price data
df = yf.download(ticker, start=start_date, end=end_date, progress=False)
if df.empty:
    raise Exception("No data downloaded. Please check the ticker or date range.")
print("Data download complete.")

# -----------------------------
# 2. Resample Data to Weekly
# -----------------------------
weekly = pd.DataFrame()
weekly['Open']   = df['Open'].resample('W').first()
weekly['High']   = df['High'].resample('W').max()
weekly['Low']    = df['Low'].resample('W').min()
weekly['Close']  = df['Close'].resample('W').last()
weekly['Volume'] = df['Volume'].resample('W').sum()
weekly.dropna(inplace=True)

# -----------------------------
# 3. Compute Technical Indicators
# -----------------------------
# ADX: 14-period, for trend-strength
adx_indicator = ta.trend.ADXIndicator(high=weekly['High'], 
                                      low=weekly['Low'], 
                                      close=weekly['Close'], 
                                      window=14, 
                                      fillna=False)
weekly['ADX'] = adx_indicator.adx()

# Williams %R: 140-period lookback
wr_indicator = ta.momentum.WilliamsRIndicator(high=weekly['High'], 
                                               low=weekly['Low'], 
                                               close=weekly['Close'], 
                                               lbp=140, 
                                               fillna=False)
weekly['WilliamsR'] = wr_indicator.williams_r()

# -----------------------------
# 4. Generate Trading Signals
# -----------------------------
# Buy when ADX > 40 and Williams %R > -20, sell when Williams %R < -20.
weekly['Buy_Signal'] = (weekly['ADX'] > 40) & (weekly['WilliamsR'] > wr_upper_band)
weekly['Sell_Signal'] = (weekly['WilliamsR'] < wr_upper_band)

# -----------------------------
# 5. Backtest the Strategy
# -----------------------------
in_position = False
entry_price = 0.0
entry_date = None
trades = []

# Loop over weekly data and execute trades at next week's open to avoid lookahead bias.
for i in range(len(weekly) - 1):
    current_date = weekly.index[i]
    next_date = weekly.index[i+1]
    current_row = weekly.iloc[i]
    next_row = weekly.iloc[i+1]
    
    if not in_position:
        if current_row['Buy_Signal']:
            entry_price = next_row['Open']  # Buy at next week's open
            entry_date = next_date
            in_position = True
            print(f"BUY signal on {entry_date.date()} at price {entry_price:.2f}")
    else:
        if current_row['Sell_Signal']:
            exit_price = next_row['Open']  # Sell at next week's open
            exit_date = next_date
            profit_pct = (exit_price - entry_price) / entry_price * 100
            trades.append({
                'Entry Date': entry_date,
                'Exit Date': exit_date,
                'Entry Price': entry_price,
                'Exit Price': exit_price,
                'Profit %': profit_pct
            })
            in_position = False
            print(f"SELL signal on {exit_date.date()} at price {exit_price:.2f} | Profit: {profit_pct:.2f}%")

# Close any open position on the final week.
if in_position:
    exit_price = weekly.iloc[-1]['Close']
    exit_date = weekly.index[-1]
    profit_pct = (exit_price - entry_price) / entry_price * 100
    trades.append({
        'Entry Date': entry_date,
        'Exit Date': exit_date,
        'Entry Price': entry_price,
        'Exit Price': exit_price,
        'Profit %': profit_pct
    })
    print(f"Final SELL on {exit_date.date()} at price {exit_price:.2f} | Profit: {profit_pct:.2f}%")

trades_df = pd.DataFrame(trades)
print("\nTrade Summary:")
print(trades_df)

# Calculate overall strategy profit percentage (cumulative return)
if not trades_df.empty:
    cumulative_return = (np.prod(1 + trades_df['Profit %'] / 100) - 1) * 100
    wins = trades_df[trades_df['Profit %'] > 0].shape[0]
    total_trades = trades_df.shape[0]
    success_rate = wins / total_trades * 100
    print(f"\nStrategy Success Rate: {success_rate:.2f}% (Winning trades: {wins} out of {total_trades})")
    print(f"Overall Profit Percentage from Strategy: {cumulative_return:.2f}%")
else:
    print("\nNo trades executed based on the defined strategy.")

# -----------------------------
# 6. Evaluate Buy & Hold Performance
# -----------------------------
# Buy at first week's open and sell at last week's close.
buy_hold_entry = weekly.iloc[0]['Open']
buy_hold_exit  = weekly.iloc[-1]['Close']
buy_hold_return = (buy_hold_exit - buy_hold_entry) / buy_hold_entry * 100
print(f"\nBuy & Hold Return: {buy_hold_return:.2f}%")

# Also, compute a weekly Buy & Hold cumulative return series:
weekly['BuyHold_CumReturn'] = (weekly['Close'] / weekly.iloc[0]['Open'] - 1) * 100

# For the strategy, compute cumulative return at each trade exit.
trades_df = trades_df.reset_index(drop=True)
trades_df['Cumulative Return'] = (np.cumprod(1 + trades_df['Profit %'] / 100) - 1) * 100

# -----------------------------
# 7. Create a Single Interactive Multi-Panel Plot (TradingView Style)
# -----------------------------
# Prepare Buy/Sell markers data.
buy_dates = [trade['Entry Date'] for trade in trades]
buy_prices = [weekly.loc[date]['Open'] for date in buy_dates]
sell_dates = [trade['Exit Date'] for trade in trades]
sell_prices = [weekly.loc[date]['Open'] for date in sell_dates]

fig = make_subplots(rows=3, cols=1, shared_xaxes=True,
                    subplot_titles=("Weekly Close Price with Buy/Sell Signals",
                                    "ADX Indicator (14-period)",
                                    "Williams %R Indicator (140-period)"),
                    vertical_spacing=0.03)

# Price chart panel
fig.add_trace(go.Scatter(x=weekly.index, y=weekly['Close'],
                         mode='lines', name='Weekly Close',
                         line=dict(color='blue')), row=1, col=1)
fig.add_trace(go.Scatter(x=buy_dates, y=buy_prices,
                         mode='markers', name='Buy Signal',
                         marker=dict(symbol='triangle-up', size=10, color='green')), row=1, col=1)
fig.add_trace(go.Scatter(x=sell_dates, y=sell_prices,
                         mode='markers', name='Sell Signal',
                         marker=dict(symbol='triangle-down', size=10, color='red')), row=1, col=1)

# ADX panel
fig.add_trace(go.Scatter(x=weekly.index, y=weekly['ADX'],
                         mode='lines', name='ADX', line=dict(color='purple')), row=2, col=1)
fig.add_hline(y=40, line=dict(color='gray', dash='dash'), row=2, col=1)

# Williams %R panel
fig.add_trace(go.Scatter(x=weekly.index, y=weekly['WilliamsR'],
                         mode='lines', name='Williams %R', line=dict(color='orange')), row=3, col=1)
fig.add_hline(y= wr_upper_band , line=dict(color='gray', dash='dash'), row=3, col=1)
fig.add_hline(y= wr_lower_band , line=dict(color='gray', dash='dash'), row=3, col=1)

# Layout adjustments
fig.update_layout(height=900, width=1000,
                  title_text="BEL Backtesting Strategy Overview (TradingView Style)",
                  hovermode='x unified',
                  showlegend=True)
fig.show(config={'scrollZoom': True})

# -----------------------------
# 8. Plot Profit/Loss Bar Chart per Trade
# -----------------------------
# Create a bar chart where each trade's profit or loss is shown.
# Profitable trades are green and upward; losses are red and downward.
trades_df['Trade Number'] = trades_df.index + 1
colors = ['green' if x >= 0 else 'red' for x in trades_df['Profit %']]

fig_bar = go.Figure(data=go.Bar(
    x=trades_df['Trade Number'],
    y=trades_df['Profit %'],
    marker_color=colors
))
fig_bar.update_layout(title="Profit/Loss per Trade",
                      xaxis_title="Trade Number",
                      yaxis_title="Profit/Loss (%)")
fig_bar.show(config={'scrollZoom': True})

# -----------------------------
# 9. Plot Cumulative Return Comparison: Strategy vs Buy & Hold
# -----------------------------
# For the strategy, use the exit dates of trades and cumulative return computed from trades.
# For Buy & Hold, use the weekly cumulative return series.
fig_line = go.Figure()
fig_line.add_trace(go.Scatter(
    x=trades_df['Exit Date'],
    y=trades_df['Cumulative Return'],
    mode='lines+markers',
    name='Strategy Cumulative Return',
    line=dict(color='blue')
))
fig_line.add_trace(go.Scatter(
    x=weekly.index,
    y=weekly['BuyHold_CumReturn'],
    mode='lines',
    name='Buy & Hold Cumulative Return',
    line=dict(color='orange')
))
fig_line.update_layout(title="Cumulative Return Comparison: Strategy vs Buy & Hold",
                       xaxis_title="Date",
                       yaxis_title="Cumulative Return (%)")
fig_line.show(config={'scrollZoom': True})
